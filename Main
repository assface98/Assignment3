"""Author: Erlend Theimann"""

from config import Config
import pygame
from map import Map
from player import Player



class Main(object):
	"""Main class"""
	def __init__(self):
		""" Initializes game """

		self.clock = pygame.time.Clock()
		self.screen = Map()
		self.player1 = Player(1)
		self.player2 = Player(2)

		self.stats = pygame.sprite.Group()
		self.stats.add(self.player1.stats)
		self.stats.add(self.player2.stats)

		self.players = pygame.sprite.Group()
		self.players.add(self.player1.spaceship)
		self.players.add(self.player2.spaceship)

		self.all = pygame.sprite.Group()
		self.all.add(self.player1.spaceship)
		self.all.add(self.player2.spaceship)
		self.all.add(self.player1.stats)
		self.all.add(self.player2.stats)

	def update(self):
		""" Updates all parameters for objects on screen """

		self.statscheck()
		self.all.update()

		self.player1.shots.update(self.player1.shots, self.screen)
		self.player2.shots.update(self.player2.shots, self.screen)

		self.collision()

	def collision(self):
		""" Checks for collisions between objects on screen """
		self.spaceshipcollide()
		self.collidepad()
		self.shotcolliion()
		self.obstaclecollide()
		self.shotobstaclecollide()

	def shotcolliion(self):
		"""Checks if spaceship is hit by laser and removes health from hit spaceship while adding score to other spaceship"""

		sprites = self.player2.shots
		for sprite in sprites:
			if pygame.sprite.collide_mask(self.player1.spaceship, sprite):
				self.player1.Health.value -= 5
				self.player2.shots.remove(sprite)
				self.player2.score.value += 5

		sprites = self.player1.shots
		for sprite in sprites:
			if pygame.sprite.collide_mask(self.player2.spaceship, sprite):
				self.player2.Health.value -= 5
				self.player1.shots.remove(sprite)
				self.player1.score.value += 5

	def shotobstaclecollide(self):
		"""checks if obstacle is hit by laser which will remove laser sprite"""

		sprites = self.player2.shots
		for sprite in sprites:
			if pygame.sprite.collide_mask(self.screen.obstacle1, sprite):
				self.player2.shots.remove(sprite)
			if pygame.sprite.collide_mask(self.screen.obstacle2, sprite):
				self.player2.shots.remove(sprite)
			if pygame.sprite.collide_mask(self.screen.obstacle3, sprite):
				self.player2.shots.remove(sprite)
			if pygame.sprite.collide_mask(self.screen.obstacle4, sprite):
				self.player2.shots.remove(sprite)
			if pygame.sprite.collide_mask(self.screen.obstacle5, sprite):
				self.player2.shots.remove(sprite)

		sprites = self.player1.shots
		for sprite in sprites:
			if pygame.sprite.collide_mask(self.screen.obstacle1, sprite):
				self.player1.shots.remove(sprite)
			if pygame.sprite.collide_mask(self.screen.obstacle2, sprite):
				self.player1.shots.remove(sprite)
			if pygame.sprite.collide_mask(self.screen.obstacle3, sprite):
				self.player1.shots.remove(sprite)
			if pygame.sprite.collide_mask(self.screen.obstacle4, sprite):
				self.player1.shots.remove(sprite)
			if pygame.sprite.collide_mask(self.screen.obstacle5, sprite):
				self.player1.shots.remove(sprite)

	def spaceshipcollide(self):
		""" Checks collision between spaceships which destroys both ships """
		if pygame.sprite.collide_mask(self.player1.spaceship, self.player2.spaceship):
			self.player1.Health.value -= 100
			self.player2.Health.value -= 100

	def obstaclecollide(self):
		"""checks collision with obstacle which destroys ship"""

		if pygame.sprite.collide_mask(self.player1.spaceship, self.screen.obstacle1):
			self.player1.Health.value -= 10
		if pygame.sprite.collide_mask(self.player1.spaceship, self.screen.obstacle2):
			self.player1.Health.value -= 10
		if pygame.sprite.collide_mask(self.player1.spaceship, self.screen.obstacle3):
			self.player1.Health.value -= 10
		if pygame.sprite.collide_mask(self.player1.spaceship, self.screen.obstacle4):
			self.player1.Health.value -= 10
		if pygame.sprite.collide_mask(self.player1.spaceship, self.screen.obstacle5):
			self.player1.Health.value -= 10

		if pygame.sprite.collide_mask(self.player2.spaceship, self.screen.obstacle1):
			self.player2.Health.value -= 10
		if pygame.sprite.collide_mask(self.player2.spaceship, self.screen.obstacle2):
			self.player2.Health.value -= 10
		if pygame.sprite.collide_mask(self.player2.spaceship, self.screen.obstacle3):
			self.player2.Health.value -= 10
		if pygame.sprite.collide_mask(self.player2.spaceship, self.screen.obstacle4):
			self.player2.Health.value -= 10
		if pygame.sprite.collide_mask(self.player2.spaceship, self.screen.obstacle5):
			self.player2.Health.value -= 10

	def statscheck(self):
		""" Checks the status of fuel level and health. If no fuel the ship can't move. If no health the player is reset."""
		#check health
		if self.player1.Health.value < 1:
			self.player1.reset()
		if self.player2.Health.value < 1:
			self.player2.reset()

		#check fuel
		if self.player1.fuel.value < 1:
			self.player1.lockthrust = True
		if self.player2.fuel.value < 1:
			self.player2.lockthrust = True

	def collidepad(self):
		""" Checks if spaceship is on its pad which will add fuel and ammo """
		if pygame.sprite.collide_mask(self.player1.spaceship, self.screen.platform1):
			self.player1.spaceship.position.y -= 0.5 #stops gravity
			self.player1.spaceship.on_pad = True
			if self.player1.fuel.value < 1000:
				self.player1.fuel.value = 1000
				self.player1.Ammo.value = 200
		else:
			self.player1.spaceship.on_pad = False

		if pygame.sprite.collide_mask(self.player2.spaceship, self.screen.platform2):
			self.player2.spaceship.position.y -= 0.5 # stops gravity
			self.player2.spaceship.on_pad = True
			if self.player2.fuel.value < 1000:
				self.player2.fuel.value = 1000
				self.player2.Ammo.value = 200
		else:
			self.player2.spaceship.on_pad = False



	def draw(self):
		""" Drawing all visible objects on screen """
		self.screen.draw()
		self.stats.draw(self.screen.screen)
		self.players.draw(self.screen.screen)
		self.player1.shots.draw(self.screen.screen)
		self.player2.shots.draw(self.screen.screen)
		pygame.display.flip()

	def handle_events(self):
		""" Handles all the events thrown by pygame """
		for event in pygame.event.get():
			if event.type == pygame.QUIT:
				exit()

			if event.type == pygame.USEREVENT+1:
				self.player1.lock = False
			if event.type == pygame.USEREVENT+2:
				self.player2.lock = False

		keys = pygame.key.get_pressed()	

		if keys[pygame.K_w]:
			self.player2.thrust()
			if not self.player2.lockthrust:
				self.player2.fuel.value -= 1
		if keys[pygame.K_s]:
			self.player2.reverse()
			if not self.player2.lockthrust:
				self.player2.fuel.value -= 1
		if keys[pygame.K_a]:
			self.player2.rotate_left()
		if keys[pygame.K_d]:
			self.player2.rotate_right()
		if keys[pygame.K_SPACE]:
			self.player2.fire()

		if keys[pygame.K_UP]:
			self.player1.thrust()
			if not self.player1.lockthrust:
				self.player1.fuel.value -= 1
		if keys[pygame.K_DOWN]:
			self.player1.reverse()
			if not self.player1.lockthrust:
				self.player1.fuel.value -= 1
		if keys[pygame.K_LEFT]:
			self.player1.rotate_left()
		if keys[pygame.K_RIGHT]:
			self.player1.rotate_right()
		if keys[pygame.K_RCTRL]:
			self.player1.fire()


		if keys[pygame.K_ESCAPE]:
			quit()

	def run(self):
		""" Main run loop """
		self.draw()
		while(True):
			self.clock.tick(60)
			self.handle_events()

			self.update()
			self.draw()


def main():
    pygame.init()
    main = Main()
    main.run()



if __name__ == '__main__':
    main()
